import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { createClient } from '@supabase/supabase-js'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

// Create admin client untuk bypass RLS
const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
)

export async function middleware(req: NextRequest) {
  const res = NextResponse.next()
  const supabase = createMiddlewareClient({ req, res })

  // Only check admin routes
  if (req.nextUrl.pathname.startsWith('/admin')) {
    console.log('ðŸ”’ Middleware: Checking admin access for:', req.nextUrl.pathname)
    
    try {
      // Get session from Supabase first
      const { data: { session }, error: sessionError } = await supabase.auth.getSession()
      
      if (sessionError) {
        console.log('ðŸ”’ Middleware: Session error:', sessionError)
        return NextResponse.redirect(new URL('/login', req.url))
      }
      
      if (!session) {
        console.log('ðŸ”’ Middleware: No session found, redirecting to login')
        return NextResponse.redirect(new URL('/login', req.url))
      }
      
      const userId = session.user?.id
      console.log('ðŸ”’ Middleware: User ID from session:', userId)
      
      if (!userId) {
        console.log('ðŸ”’ Middleware: No user ID found, redirecting to login')
        return NextResponse.redirect(new URL('/login', req.url))
      }

      // Check user role using admin client to bypass RLS
      console.log('ðŸ”’ Middleware: Checking user role with admin client...')
      const { data: userRoleData, error: roleError } = await supabaseAdmin
        .from('user_roles')
        .select('role')
        .eq('user_id', userId)
        .single()

      console.log('ðŸ”’ Middleware: Role check result:', { userRoleData, error: roleError })

      if (roleError || !userRoleData || userRoleData.role !== 'admin') {
        console.log('ðŸ”’ Middleware: User is not admin, redirecting to dashboard')
        return NextResponse.redirect(new URL('/dashboard', req.url))
      }

      console.log('ðŸ”’ Middleware: User is admin, allowing access')
    } catch (error) {
      console.error('ðŸ”’ Middleware error:', error)
      return NextResponse.redirect(new URL('/login', req.url))
    }
  }

  return res
}

export const config = {
  matcher: ['/admin/:path*']
}